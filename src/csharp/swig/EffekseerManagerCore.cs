//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class EffekseerManagerCore : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EffekseerManagerCore(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EffekseerManagerCore obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EffekseerManagerCore() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EffekseerCorePINVOKE.delete_EffekseerManagerCore(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public EffekseerManagerCore() : this(EffekseerCorePINVOKE.new_EffekseerManagerCore(), true) {
  }

  public bool Initialize(int spriteMaxCount) {
    bool ret = EffekseerCorePINVOKE.EffekseerManagerCore_Initialize(swigCPtr, spriteMaxCount);
    return ret;
  }

  public void Update(float deltaFrames) {
    EffekseerCorePINVOKE.EffekseerManagerCore_Update(swigCPtr, deltaFrames);
  }

  public void BeginUpdate() {
    EffekseerCorePINVOKE.EffekseerManagerCore_BeginUpdate(swigCPtr);
  }

  public void EndUpdate() {
    EffekseerCorePINVOKE.EffekseerManagerCore_EndUpdate(swigCPtr);
  }

  public void UpdateHandleToMoveToFrame(int handle, float v) {
    EffekseerCorePINVOKE.EffekseerManagerCore_UpdateHandleToMoveToFrame(swigCPtr, handle, v);
  }

  public int Play(EffekseerEffectCore effect) {
    int ret = EffekseerCorePINVOKE.EffekseerManagerCore_Play(swigCPtr, EffekseerEffectCore.getCPtr(effect));
    return ret;
  }

  public void Stop(int handle) {
    EffekseerCorePINVOKE.EffekseerManagerCore_Stop(swigCPtr, handle);
  }

  public void SetPaused(int handle, bool v) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetPaused(swigCPtr, handle, v);
  }

  public void SetShown(int handle, bool v) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetShown(swigCPtr, handle, v);
  }

  public void SetEffectPosition(int handle, float x, float y, float z) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetEffectPosition(swigCPtr, handle, x, y, z);
  }

  public void SetEffectTransformMatrix(int handle, float v0, float v1, float v2, float v3, float v4, float v5, float v6, float v7, float v8, float v9, float v10, float v11) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetEffectTransformMatrix(swigCPtr, handle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  }

  public void DrawBack() {
    EffekseerCorePINVOKE.EffekseerManagerCore_DrawBack(swigCPtr);
  }

  public void DrawFront() {
    EffekseerCorePINVOKE.EffekseerManagerCore_DrawFront(swigCPtr);
  }

  public void SetProjectionMatrix(float v0, float v1, float v2, float v3, float v4, float v5, float v6, float v7, float v8, float v9, float v10, float v11, float v12, float v13, float v14, float v15) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetProjectionMatrix(swigCPtr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  }

  public void SetCameraMatrix(float v0, float v1, float v2, float v3, float v4, float v5, float v6, float v7, float v8, float v9, float v10, float v11, float v12, float v13, float v14, float v15) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetCameraMatrix(swigCPtr, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  }

  public bool Exists(int handle) {
    bool ret = EffekseerCorePINVOKE.EffekseerManagerCore_Exists(swigCPtr, handle);
    return ret;
  }

  public void SetViewProjectionMatrixWithSimpleWindow(int windowWidth, int windowHeight) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetViewProjectionMatrixWithSimpleWindow(swigCPtr, windowWidth, windowHeight);
  }

  public void SetDynamicInput(int handle, int index, float value) {
    EffekseerCorePINVOKE.EffekseerManagerCore_SetDynamicInput(swigCPtr, handle, index, value);
  }

  public float GetDynamicInput(int handle, int index) {
    float ret = EffekseerCorePINVOKE.EffekseerManagerCore_GetDynamicInput(swigCPtr, handle, index);
    return ret;
  }

  public void LaunchWorkerThreads(int n) {
    EffekseerCorePINVOKE.EffekseerManagerCore_LaunchWorkerThreads(swigCPtr, n);
  }

}

}
